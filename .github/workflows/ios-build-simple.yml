name: iOS Build (Simple)

# This workflow builds the iOS app without code signing
# Perfect for testing and development without needing certificates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  build-and-test:
    name: Build for iOS Simulator
    runs-on: macos-14

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
        xcodebuild -version
        swift --version

    - name: Install Dependencies
      run: |
        # Install xcpretty for better output formatting (optional)
        gem install xcpretty

    - name: Cache SPM Dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Resolve Swift Packages
      run: swift package resolve

    - name: Build Swift Package (Release)
      run: swift build -c release

    - name: Run Tests
      run: swift test --parallel

    - name: Build for iOS Simulator
      run: |
        set -o pipefail
        xcodebuild clean build \
          -scheme Blab \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}

    - name: Build Summary
      if: success()
      run: |
        echo "âœ… Build successful!"
        echo "ðŸ“± Platform: iOS Simulator"
        echo "ðŸŽ¯ Scheme: Blab"
        echo "ðŸ“¦ Configuration: Debug"

    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          ~/Library/Logs/DiagnosticReports
          DerivedData/Logs
        retention-days: 3
